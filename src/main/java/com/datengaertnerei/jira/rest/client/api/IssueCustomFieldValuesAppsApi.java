/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datengaertnerei.jira.rest.client.api;

import com.datengaertnerei.jira.rest.client.ApiCallback;
import com.datengaertnerei.jira.rest.client.ApiClient;
import com.datengaertnerei.jira.rest.client.ApiException;
import com.datengaertnerei.jira.rest.client.ApiResponse;
import com.datengaertnerei.jira.rest.client.Configuration;
import com.datengaertnerei.jira.rest.client.Pair;
import com.datengaertnerei.jira.rest.client.ProgressRequestBody;
import com.datengaertnerei.jira.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.datengaertnerei.jira.rest.client.model.CustomFieldValueUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IssueCustomFieldValuesAppsApi {
    private ApiClient localVarApiClient;

    public IssueCustomFieldValuesAppsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IssueCustomFieldValuesAppsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for updateCustomFieldValue
     * @param fieldIdOrKey The ID or key of the custom field. For example, &#x60;customfield_10010&#x60;. (required)
     * @param customFieldValueUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldValueCall(String fieldIdOrKey, CustomFieldValueUpdateRequest customFieldValueUpdateRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = customFieldValueUpdateRequest;

        // create path and map variables
        String localVarPath = "/rest/api/3/app/field/{fieldIdOrKey}/value"
            .replaceAll("\\{" + "fieldIdOrKey" + "\\}", localVarApiClient.escapeString(fieldIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomFieldValueValidateBeforeCall(String fieldIdOrKey, CustomFieldValueUpdateRequest customFieldValueUpdateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fieldIdOrKey' is set
        if (fieldIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'fieldIdOrKey' when calling updateCustomFieldValue(Async)");
        }
        
        // verify the required parameter 'customFieldValueUpdateRequest' is set
        if (customFieldValueUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'customFieldValueUpdateRequest' when calling updateCustomFieldValue(Async)");
        }
        

        okhttp3.Call localVarCall = updateCustomFieldValueCall(fieldIdOrKey, customFieldValueUpdateRequest, _callback);
        return localVarCall;

    }

    /**
     * Update custom field value
     * Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * @param fieldIdOrKey The ID or key of the custom field. For example, &#x60;customfield_10010&#x60;. (required)
     * @param customFieldValueUpdateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateCustomFieldValue(String fieldIdOrKey, CustomFieldValueUpdateRequest customFieldValueUpdateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = updateCustomFieldValueWithHttpInfo(fieldIdOrKey, customFieldValueUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update custom field value
     * Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * @param fieldIdOrKey The ID or key of the custom field. For example, &#x60;customfield_10010&#x60;. (required)
     * @param customFieldValueUpdateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateCustomFieldValueWithHttpInfo(String fieldIdOrKey, CustomFieldValueUpdateRequest customFieldValueUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCustomFieldValueValidateBeforeCall(fieldIdOrKey, customFieldValueUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update custom field value (asynchronously)
     * Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.  **[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
     * @param fieldIdOrKey The ID or key of the custom field. For example, &#x60;customfield_10010&#x60;. (required)
     * @param customFieldValueUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the request is not authenticated as the app that provided the field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the field is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCustomFieldValueAsync(String fieldIdOrKey, CustomFieldValueUpdateRequest customFieldValueUpdateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomFieldValueValidateBeforeCall(fieldIdOrKey, customFieldValueUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
