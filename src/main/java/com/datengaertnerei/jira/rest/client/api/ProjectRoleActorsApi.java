/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datengaertnerei.jira.rest.client.api;

import com.datengaertnerei.jira.rest.client.ApiCallback;
import com.datengaertnerei.jira.rest.client.ApiClient;
import com.datengaertnerei.jira.rest.client.ApiException;
import com.datengaertnerei.jira.rest.client.ApiResponse;
import com.datengaertnerei.jira.rest.client.Configuration;
import com.datengaertnerei.jira.rest.client.Pair;
import com.datengaertnerei.jira.rest.client.ProgressRequestBody;
import com.datengaertnerei.jira.rest.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.datengaertnerei.jira.rest.client.model.ActorInputBean;
import com.datengaertnerei.jira.rest.client.model.ActorsMap;
import com.datengaertnerei.jira.rest.client.model.ProjectRole;
import com.datengaertnerei.jira.rest.client.model.ProjectRoleActorsUpdateBean;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectRoleActorsApi {
    private ApiClient localVarApiClient;

    public ProjectRoleActorsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectRoleActorsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addActorUsers
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addActorUsersCall(String projectIdOrKey, Long id, ActorsMap actorsMap, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = actorsMap;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replaceAll("\\{" + "projectIdOrKey" + "\\}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addActorUsersValidateBeforeCall(String projectIdOrKey, Long id, ActorsMap actorsMap, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling addActorUsers(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addActorUsers(Async)");
        }
        
        // verify the required parameter 'actorsMap' is set
        if (actorsMap == null) {
            throw new ApiException("Missing the required parameter 'actorsMap' when calling addActorUsers(Async)");
        }
        

        okhttp3.Call localVarCall = addActorUsersCall(projectIdOrKey, id, actorsMap, _callback);
        return localVarCall;

    }

    /**
     * Add actors to project role
     * Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @return ProjectRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRole addActorUsers(String projectIdOrKey, Long id, ActorsMap actorsMap) throws ApiException {
        ApiResponse<ProjectRole> localVarResp = addActorUsersWithHttpInfo(projectIdOrKey, id, actorsMap);
        return localVarResp.getData();
    }

    /**
     * Add actors to project role
     * Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @return ApiResponse&lt;ProjectRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectRole> addActorUsersWithHttpInfo(String projectIdOrKey, Long id, ActorsMap actorsMap) throws ApiException {
        okhttp3.Call localVarCall = addActorUsersValidateBeforeCall(projectIdOrKey, id, actorsMap, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add actors to project role (asynchronously)
     * Adds actors to a project role for the project.  To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorsMap The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned.  For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a &#x60;user&#x60; actor for this project. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  the user or group is not found.  *  the group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addActorUsersAsync(String projectIdOrKey, Long id, ActorsMap actorsMap, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = addActorUsersValidateBeforeCall(projectIdOrKey, id, actorsMap, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addProjectRoleActorsToRole
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorInputBean  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectRoleActorsToRoleCall(Long id, ActorInputBean actorInputBean, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = actorInputBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}/actors"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addProjectRoleActorsToRoleValidateBeforeCall(Long id, ActorInputBean actorInputBean, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addProjectRoleActorsToRole(Async)");
        }
        
        // verify the required parameter 'actorInputBean' is set
        if (actorInputBean == null) {
            throw new ApiException("Missing the required parameter 'actorInputBean' when calling addProjectRoleActorsToRole(Async)");
        }
        

        okhttp3.Call localVarCall = addProjectRoleActorsToRoleCall(id, actorInputBean, _callback);
        return localVarCall;

    }

    /**
     * Add default actors to project role
     * Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorInputBean  (required)
     * @return ProjectRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRole addProjectRoleActorsToRole(Long id, ActorInputBean actorInputBean) throws ApiException {
        ApiResponse<ProjectRole> localVarResp = addProjectRoleActorsToRoleWithHttpInfo(id, actorInputBean);
        return localVarResp.getData();
    }

    /**
     * Add default actors to project role
     * Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorInputBean  (required)
     * @return ApiResponse&lt;ProjectRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectRole> addProjectRoleActorsToRoleWithHttpInfo(Long id, ActorInputBean actorInputBean) throws ApiException {
        okhttp3.Call localVarCall = addProjectRoleActorsToRoleValidateBeforeCall(id, actorInputBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add default actors to project role (asynchronously)
     * Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param actorInputBean  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addProjectRoleActorsToRoleAsync(Long id, ActorInputBean actorInputBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = addProjectRoleActorsToRoleValidateBeforeCall(id, actorInputBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteActor
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove from the project role. (optional)
     * @param group The name of the group to remove from the project role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActorCall(String projectIdOrKey, Long id, String user, String group, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replaceAll("\\{" + "projectIdOrKey" + "\\}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteActorValidateBeforeCall(String projectIdOrKey, Long id, String user, String group, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling deleteActor(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteActor(Async)");
        }
        

        okhttp3.Call localVarCall = deleteActorCall(projectIdOrKey, id, user, group, _callback);
        return localVarCall;

    }

    /**
     * Delete actors from project role
     * Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove from the project role. (optional)
     * @param group The name of the group to remove from the project role. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteActor(String projectIdOrKey, Long id, String user, String group) throws ApiException {
        deleteActorWithHttpInfo(projectIdOrKey, id, user, group);
    }

    /**
     * Delete actors from project role
     * Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove from the project role. (optional)
     * @param group The name of the group to remove from the project role. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteActorWithHttpInfo(String projectIdOrKey, Long id, String user, String group) throws ApiException {
        okhttp3.Call localVarCall = deleteActorValidateBeforeCall(projectIdOrKey, id, user, group, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete actors from project role (asynchronously)
     * Deletes actors from a project role for the project.  To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove from the project role. (optional)
     * @param group The name of the group to remove from the project role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project or project role is not found.  *  the calling user does not have administrative permission. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteActorAsync(String projectIdOrKey, Long id, String user, String group, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteActorValidateBeforeCall(projectIdOrKey, id, user, group, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProjectRoleActorsFromRole
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove as a default actor. (optional)
     * @param group The group name of the group to be removed as a default actor. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectRoleActorsFromRoleCall(Long id, String user, String group, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}/actors"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProjectRoleActorsFromRoleValidateBeforeCall(Long id, String user, String group, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteProjectRoleActorsFromRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteProjectRoleActorsFromRoleCall(id, user, group, _callback);
        return localVarCall;

    }

    /**
     * Delete default actors from project role
     * Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove as a default actor. (optional)
     * @param group The group name of the group to be removed as a default actor. (optional)
     * @return ProjectRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRole deleteProjectRoleActorsFromRole(Long id, String user, String group) throws ApiException {
        ApiResponse<ProjectRole> localVarResp = deleteProjectRoleActorsFromRoleWithHttpInfo(id, user, group);
        return localVarResp.getData();
    }

    /**
     * Delete default actors from project role
     * Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove as a default actor. (optional)
     * @param group The group name of the group to be removed as a default actor. (optional)
     * @return ApiResponse&lt;ProjectRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectRole> deleteProjectRoleActorsFromRoleWithHttpInfo(Long id, String user, String group) throws ApiException {
        okhttp3.Call localVarCall = deleteProjectRoleActorsFromRoleValidateBeforeCall(id, user, group, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete default actors from project role (asynchronously)
     * Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.  Changing a project role&#39;s default actors does not affect project role members for projects already created.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param user The user account ID of the user to remove as a default actor. (optional)
     * @param group The group name of the group to be removed as a default actor. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteProjectRoleActorsFromRoleAsync(Long id, String user, String group, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProjectRoleActorsFromRoleValidateBeforeCall(id, user, group, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProjectRoleActorsForRole
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectRoleActorsForRoleCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/api/3/role/{id}/actors"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProjectRoleActorsForRoleValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProjectRoleActorsForRole(Async)");
        }
        

        okhttp3.Call localVarCall = getProjectRoleActorsForRoleCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get default actors for project role
     * Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @return ProjectRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRole getProjectRoleActorsForRole(Long id) throws ApiException {
        ApiResponse<ProjectRole> localVarResp = getProjectRoleActorsForRoleWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get default actors for project role
     * Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @return ApiResponse&lt;ProjectRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectRole> getProjectRoleActorsForRoleWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = getProjectRoleActorsForRoleValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default actors for project role (asynchronously)
     * Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is invalid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Returned if the user does not have administrative permissions. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if the project role is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProjectRoleActorsForRoleAsync(Long id, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProjectRoleActorsForRoleValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setActors
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setActorsCall(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = projectRoleActorsUpdateBean;

        // create path and map variables
        String localVarPath = "/rest/api/3/project/{projectIdOrKey}/role/{id}"
            .replaceAll("\\{" + "projectIdOrKey" + "\\}", localVarApiClient.escapeString(projectIdOrKey.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2", "basicAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setActorsValidateBeforeCall(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projectIdOrKey' is set
        if (projectIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'projectIdOrKey' when calling setActors(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling setActors(Async)");
        }
        
        // verify the required parameter 'projectRoleActorsUpdateBean' is set
        if (projectRoleActorsUpdateBean == null) {
            throw new ApiException("Missing the required parameter 'projectRoleActorsUpdateBean' when calling setActors(Async)");
        }
        

        okhttp3.Call localVarCall = setActorsCall(projectIdOrKey, id, projectRoleActorsUpdateBean, _callback);
        return localVarCall;

    }

    /**
     * Set actors for project role
     * Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @return ProjectRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectRole setActors(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean) throws ApiException {
        ApiResponse<ProjectRole> localVarResp = setActorsWithHttpInfo(projectIdOrKey, id, projectRoleActorsUpdateBean);
        return localVarResp.getData();
    }

    /**
     * Set actors for project role
     * Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @return ApiResponse&lt;ProjectRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectRole> setActorsWithHttpInfo(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean) throws ApiException {
        okhttp3.Call localVarCall = setActorsValidateBeforeCall(projectIdOrKey, id, projectRoleActorsUpdateBean, null);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set actors for project role (asynchronously)
     * Sets the actors for a project role for a project, replacing all existing actors.  To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).  **[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive). (required)
     * @param id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs. (required)
     * @param projectRoleActorsUpdateBean The groups or users to associate with the project role for this project. Provide the user account ID or group name. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returned if the request is successful. The complete list of actors for the project is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Returned if the request is not valid. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Returned if the authentication credentials are incorrect or missing or if the calling user lacks administrative permissions for the project. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Returned if:   *  the project is not found.  *  a user or group is not found.  *  a group or user is not active. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setActorsAsync(String projectIdOrKey, Long id, ProjectRoleActorsUpdateBean projectRoleActorsUpdateBean, final ApiCallback<ProjectRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = setActorsValidateBeforeCall(projectIdOrKey, id, projectRoleActorsUpdateBean, _callback);
        Type localVarReturnType = new TypeToken<ProjectRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
